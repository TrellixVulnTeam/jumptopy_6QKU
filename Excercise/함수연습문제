<연습문제>
'연습생.txt' 파일의 이름을 읽어와 리스트로 만든다.
show_list() 이라는 함수에서 현재 연습생 리스트를 출력한다.
make_idol() 함수에서 이름 앞 뒤로 아래와 같이 문구를 추가하여 메세지를 출력한다.
예) 신예 아이돌 유라 인기 급상승
make_world_star() 함수에서 이름을 활용해 아래와 같은 문구를 추가하여 메세지를 출력한다.
예) 아이돌 유라 월드스타 등극

<샌드위치 만들기>

샌드위치 가게에 방문한다고 가정해보자.
프로그램은 아래와 같이 손님을 맞이하고 있다.
기본 대기 메세지)
안녕하세요. 저희 가게에 방문해 주세서 감사합니다.
1. 주문
2. 종료
입력:

'1. 주문' 을 입력하게 되면 고객이 샌드위치에 넣고 싶어하는 재료 리스트를 받는 input_ingredient()함수와 샌드위치를 만드는 make_sandwiches()함수를 작성한다.
input_ingredient()함수는 고객이 '종료'를 입력할 때 까지 재료를 입력받아야 함
입력예)
안녕하세요. 원하시는 재료를 입력하세요: 상추
안녕하세요. 원하시는 재료를 입력하세요: 토마토
.
.
안녕하세요. 원하시는 재료를 입력하세요: 종료

make_sandwiches()함수는 함수 호출에서 제공하는 항목을 모두 수집하는 매개 변수가 있어야 하고, 주문받은 샌드위치를 요약해서 출력해야 한다.

출력예)
샌드위치를 만들겠습니다.
상추 추가합니다.
토마토 추가합니다.
.
.
여기 주문하신 샌드위치 만들었습니다. 맛있게 드세요.

<방명록 만들기>
사람이 방문 했을 때 마다 한 번 구동되고 종료되는 방명록을 작성한다.
방명록은 방명록.txt에 아래와 같은 형식으로 저장된다.
홍길동 800912
손미나 901223

프로그램이 구동되면 먼저 이름을 아래와 같이 물어본다.
"이름을 입력하세요:"

방명록에 이름이 있으면 해당 이름을 사용하여 아래와 같이 환영 인사를 한다.
 "홍길동님 다시 방문해 주셔서 감사합니다. 즐거운 시간되세요."

 방명록에 방문자 이름이 없다면 아래와 같이 생년월일을 입력받는다.
 "생년월일을 입력하세요 (예:801212):"

 신규 방문자가 생년월일을 입력하면 아래와 같이 환영인사를 하고 신규 방문자 정보를 "방명록.txt"에
 저장한다.

 <클래스 레스토랑 1>
 Restaurant 클래스를 만든다. __init((() 메서드는 restaurant_name과 cuisine_type 두 가지 속성을 저장해야 한다.
 이 정보를 출력하는 describe_resaurant() 메서드와 레스토랑이 열렸다는 메시지를 출력하는 open_restaurant()메소드를 출력한다.

 Restaurant 클래스의 인스턴스를 만들고 메서드를 모두 호출한다.

 <클래스 레스토랑 2>
 클래스1에서 3가지 인스턴스를 만드로 각각의 메서드를 호출한다.

 <클래스 레스토랑 3>
 클래스1에서 number_served 속성을 추가한다. (기본값은 customer.txt 파일에서 가져온다. __init__()에서)
 number_served의 값을 설정할 수 있는 set_number_served()메서드, 영업일 종료후 서빙한 손님 수를 추가하는 increment_number_served(self, additional_served) 함수를 추가한다.
 또한 현제까지 누적된 서빙 손님수를 출력하는 show_number_served() 메서드를 추가하고. 객체가 소멸될때 __del__()를 활용하여 현재 number_served 값을 customer.txt에 추가한다.



